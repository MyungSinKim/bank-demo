package com.yourname.demo.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.yourname.demo.model.CustomerTransaction;
import com.yourname.demo.model.enums.db.AccountAcTypeEnum;
import com.yourname.demo.model.iface.IAccount;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: account.
 * @author autogenerated
 */

@TypeDefs( {@TypeDef(name = "enumType", typeClass = com.felees.hbnpojogen.persistence.impl.StringValuedEnumType.class)} )
@Entity
@Table(name = "account")
public class Account implements Cloneable, Serializable, IPojoGenEntity, IAccount {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029080L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private AccountAcTypeEnum acType;
	/** Field mapping. */
	private java.math.BigDecimal balance;
	/** Field mapping. */
	private Customer customer;
	/** Field mapping. */
	private Set<CustomerTransaction> customerTransactions = new HashSet<CustomerTransaction>();

	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Account() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Account(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param acType AccountAcTypeEnum object;
	 * @param balance java.math.BigDecimal object;
	 * @param customer Customer object;
	 * @param id Long object;
	 */
	public Account(AccountAcTypeEnum acType, java.math.BigDecimal balance, Customer customer, 					
			Long id) {

		this.acType = acType;
		this.balance = balance;
		this.customer = customer;
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Account.class;
	}
 

    /**
     * Return the value associated with the column: acType.
	 * @return A AccountAcTypeEnum object (this.acType)
	 */
	@Type(type = "enumType", parameters = {@Parameter(name = "enum", value = "com.yourname.demo.model.enums.db.AccountAcTypeEnum"), @Parameter(name = "forPgSQL", value = "false")})
	@Basic( optional = false )
	@Column( name = "ac_type", nullable = false  )
	public AccountAcTypeEnum getAcType() {
		return this.acType;
		
	}
	

  
    /**  
     * Set the value related to the column: acType.
	 * @param acType the acType value you wish to set
	 */
	public void setAcType(final AccountAcTypeEnum acType) {
		this.acType = acType;
	}

    /**
     * Return the value associated with the column: balance.
	 * @return A java.math.BigDecimal object (this.balance)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public java.math.BigDecimal getBalance() {
		return this.balance;
		
	}
	

  
    /**  
     * Set the value related to the column: balance.
	 * @param balance the balance value you wish to set
	 */
	public void setBalance(final java.math.BigDecimal balance) {
		this.balance = balance;
	}

    /**
     * Return the value associated with the column: customer.
	 * @return A Customer object (this.customer)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "customer_id", nullable = false )
	public Customer getCustomer() {
		return this.customer;
		
	}
	

  
    /**  
     * Set the value related to the column: customer.
	 * @param customer the customer value you wish to set
	 */
	public void setCustomer(final Customer customer) {
		this.customer = customer;
	}

    /**
     * Return the value associated with the column: customerTransaction.
	 * @return A Set&lt;CustomerTransaction&gt; object (this.customerTransaction)
	 */
 	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "destinationAccount"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<CustomerTransaction> getCustomerTransactions() {
		return this.customerTransactions;
		
	}
	
	/**
	 * Adds a bi-directional link of type CustomerTransaction to the customerTransactions set.
	 * @param customerTransaction item to add
	 */
	public void addCustomerTransaction(CustomerTransaction customerTransaction) {
		customerTransaction.setDestinationAccount(this);
		this.customerTransactions.add(customerTransaction);
	}

  
    /**  
     * Set the value related to the column: customerTransaction.
	 * @param customerTransaction the customerTransaction value you wish to set
	 */
	public void setCustomerTransactions(final Set<CustomerTransaction> customerTransaction) {
		this.customerTransactions = customerTransaction;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "id", nullable = false  )
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Account clone() throws CloneNotSupportedException {
		
        final Account copy = (Account)super.clone();

		copy.setAcType(this.getAcType());
		copy.setBalance(this.getBalance());
		copy.setCustomer(this.getCustomer());
		if (this.getCustomerTransactions() != null) {
			copy.getCustomerTransactions().addAll(this.getCustomerTransactions());
		}
		copy.setId(this.getId());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("acType: " + this.getAcType() + ", ");
		sb.append("balance: " + this.getBalance() + ", ");
		sb.append("id: " + this.getId());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Account that; 
		try {
			that = (Account) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAcType() == null) && (that.getAcType() == null)) || (getAcType() != null && getAcType().equals(that.getAcType())));
		result = result && (((getBalance() == null) && (that.getBalance() == null)) || (getBalance() != null && getBalance().equals(that.getBalance())));
		result = result && (((getCustomer() == null) && (that.getCustomer() == null)) || (getCustomer() != null && getCustomer().getId().equals(that.getCustomer().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
