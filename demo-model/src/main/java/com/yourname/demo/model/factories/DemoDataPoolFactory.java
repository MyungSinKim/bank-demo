package com.yourname.demo.model.factories;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import com.yourname.demo.model.*;
import com.yourname.demo.model.factories.DemoDataPoolFactory;
import org.joda.time.DateTime;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class DemoDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"CustomerTransaction", "Account", "Customer", "Address"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("Account", "Customer");
 		tableDeps.put("Customer", "Address");
 		tableDeps.put("CustomerTransaction", "Account");
 		tableDeps.put("CustomerTransaction", "Customer");
	}

    /**
     * Data pool factory for Account.
     * @return Account A Account object
     */
    public static Account getAccount() {

        Account account =  getAccount(
	        getCustomer());

		return account;
       
    }

     /**
     * Data pool factory for Account.
     * @param customer A valid Customer object
     * @return Account A Account object
     */
    public static Account getAccount(Customer customer) {
        Account account = new Account();     
        account.setAcType(BasicDataGenerator.generateRandomEnumFromClass(com.yourname.demo.model.enums.db.AccountAcTypeEnum.class));
        account.setBalance(BasicDataGenerator.generateRandomDecimal(10, 0));
        account.setCustomer(customer);

        return account;
    }

    /**
     * Data pool factory for Address.
     * @return AddressA Address object
     */
    public static Address getAddress() {

        Address address = new Address();    
        
        address.setCity(BasicDataGenerator.generateRandomString(50));
        address.setCountry(BasicDataGenerator.generateRandomString(50));
        address.setLine1(BasicDataGenerator.generateRandomString(50));
        address.setLine2(BasicDataGenerator.generateRandomString(50));

        return address;
    }

    /**
     * Data pool factory for Customer.
     * @return Customer A Customer object
     */
    public static Customer getCustomer() {

        Customer customer =  getCustomer(
	        getAddress(), getAddress());

		return customer;
       
    }

     /**
     * Data pool factory for Customer.
     * @param address1 A valid Address object
     * @param address2 A valid Address object
     * @return Customer A Customer object
     */
    public static Customer getCustomer(Address address1, Address address2) {
        Customer customer = new Customer();     
        customer.setAddress1(address1);
        customer.setAddress2(address2);
        customer.setCurrentAccountOpeningBalance(BasicDataGenerator.generateRandomDecimal(10, 0));
        customer.setName(BasicDataGenerator.generateRandomString(50));
        customer.setSavingsAccountOpeningBalance(BasicDataGenerator.generateRandomDecimal(10, 0));
        customer.setSurname(BasicDataGenerator.generateRandomString(50));

        return customer;
    }

    /**
     * Data pool factory for CustomerTransaction.
     * @return CustomerTransaction A CustomerTransaction object
     */
    public static CustomerTransaction getCustomerTransaction() {

        CustomerTransaction customerTransaction =  getCustomerTransaction(
	        getCustomer(), getAccount(), getAccount());

		return customerTransaction;
       
    }

     /**
     * Data pool factory for CustomerTransaction.
     * @param customer A valid Customer object
     * @param destinationAccount A valid Account object
     * @param originatingAccount A valid Account object
     * @return CustomerTransaction A CustomerTransaction object
     */
    public static CustomerTransaction getCustomerTransaction(Customer customer, Account destinationAccount, Account originatingAccount) {
        CustomerTransaction customerTransaction = new CustomerTransaction();     
        customerTransaction.setAmount(BasicDataGenerator.generateRandomDecimal(10, 0));
        customerTransaction.setCustomer(customer);
        customerTransaction.setDestinationAccount(destinationAccount);
        customerTransaction.setDrcr(BasicDataGenerator.generateRandomEnumFromClass(com.yourname.demo.model.enums.db.CustomerTransactionDrcrEnum.class));
        customerTransaction.setOriginatingAccount(originatingAccount);
        customerTransaction.setTransactionDate(new DateTime(BasicDataGenerator.generateDate()));

        return customerTransaction;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}
