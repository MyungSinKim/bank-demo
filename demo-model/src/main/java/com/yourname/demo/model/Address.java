package com.yourname.demo.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.yourname.demo.model.Customer;
import com.yourname.demo.model.iface.IAddress;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: address.
 * @author autogenerated
 */

@Entity
@Table(name = "address")
public class Address implements Cloneable, Serializable, IPojoGenEntity, IAddress {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029079L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private String city;
	/** Field mapping. */
	private String country;
	/** Field mapping. */
	private Set<Customer> customers = new HashSet<Customer>();

	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private String line1;
	/** Field mapping. */
	private String line2;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Address() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Address(Long id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Address.class;
	}
 

    /**
     * Return the value associated with the column: city.
	 * @return A String object (this.city)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getCity() {
		return this.city;
		
	}
	

  
    /**  
     * Set the value related to the column: city.
	 * @param city the city value you wish to set
	 */
	public void setCity(final String city) {
		this.city = city;
	}

    /**
     * Return the value associated with the column: country.
	 * @return A String object (this.country)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getCountry() {
		return this.country;
		
	}
	

  
    /**  
     * Set the value related to the column: country.
	 * @param country the country value you wish to set
	 */
	public void setCountry(final String country) {
		this.country = country;
	}

    /**
     * Return the value associated with the column: customer.
	 * @return A Set&lt;Customer&gt; object (this.customer)
	 */
 	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "address1"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Customer> getCustomers() {
		return this.customers;
		
	}
	
	/**
	 * Adds a bi-directional link of type Customer to the customers set.
	 * @param customer item to add
	 */
	public void addCustomer(Customer customer) {
		customer.setAddress1(this);
		this.customers.add(customer);
	}

  
    /**  
     * Set the value related to the column: customer.
	 * @param customer the customer value you wish to set
	 */
	public void setCustomers(final Set<Customer> customer) {
		this.customers = customer;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "id", nullable = false  )
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: line1.
	 * @return A String object (this.line1)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getLine1() {
		return this.line1;
		
	}
	

  
    /**  
     * Set the value related to the column: line1.
	 * @param line1 the line1 value you wish to set
	 */
	public void setLine1(final String line1) {
		this.line1 = line1;
	}

    /**
     * Return the value associated with the column: line2.
	 * @return A String object (this.line2)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getLine2() {
		return this.line2;
		
	}
	

  
    /**  
     * Set the value related to the column: line2.
	 * @param line2 the line2 value you wish to set
	 */
	public void setLine2(final String line2) {
		this.line2 = line2;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Address clone() throws CloneNotSupportedException {
		
        final Address copy = (Address)super.clone();

		copy.setCity(this.getCity());
		copy.setCountry(this.getCountry());
		if (this.getCustomers() != null) {
			copy.getCustomers().addAll(this.getCustomers());
		}
		copy.setId(this.getId());
		copy.setLine1(this.getLine1());
		copy.setLine2(this.getLine2());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("city: " + this.getCity() + ", ");
		sb.append("country: " + this.getCountry() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("line1: " + this.getLine1() + ", ");
		sb.append("line2: " + this.getLine2());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Address that; 
		try {
			that = (Address) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCity() == null) && (that.getCity() == null)) || (getCity() != null && getCity().equals(that.getCity())));
		result = result && (((getCountry() == null) && (that.getCountry() == null)) || (getCountry() != null && getCountry().equals(that.getCountry())));
		result = result && (((getLine1() == null) && (that.getLine1() == null)) || (getLine1() != null && getLine1().equals(that.getLine1())));
		result = result && (((getLine2() == null) && (that.getLine2() == null)) || (getLine2() != null && getLine2().equals(that.getLine2())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
