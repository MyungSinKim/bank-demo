package com.yourname.demo.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.yourname.demo.model.Account;
import com.yourname.demo.model.CustomerTransaction;
import com.yourname.demo.model.iface.ICustomer;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.OrderBy;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: customer.
 * @author autogenerated
 */

@Entity
@Table(name = "customer")
public class Customer implements Cloneable, Serializable, IPojoGenEntity, ICustomer {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559029078L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Long> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Long>());
	
	/** hashCode temporary storage. */
	private volatile Long hashCode;
	

	/** Field mapping. */
	private Set<Account> accounts = new HashSet<Account>();

	/** Field mapping. */
	private Address address1;
	/** Field mapping. */
	private Address address2;
	/** Field mapping. */
	private java.math.BigDecimal currentAccountOpeningBalance;
	/** Field mapping. */
	private Set<CustomerTransaction> customerTransactions = new HashSet<CustomerTransaction>();

	/** Field mapping. */
	private Long id = 0L; // init for hibernate bug workaround
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private java.math.BigDecimal savingsAccountOpeningBalance;
	/** Field mapping. */
	private String surname;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Customer() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Customer(Long id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param address1 Address object;
	 * @param address2 Address object;
	 * @param currentAccountOpeningBalance java.math.BigDecimal object;
	 * @param id Long object;
	 * @param name String object;
	 * @param savingsAccountOpeningBalance java.math.BigDecimal object;
	 * @param surname String object;
	 */
	public Customer(Address address1, Address address2, java.math.BigDecimal currentAccountOpeningBalance, 					
			Long id, String name, java.math.BigDecimal savingsAccountOpeningBalance, 					
			String surname) {

		this.address1 = address1;
		this.address2 = address2;
		this.currentAccountOpeningBalance = currentAccountOpeningBalance;
		this.id = id;
		this.name = name;
		this.savingsAccountOpeningBalance = savingsAccountOpeningBalance;
		this.surname = surname;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Customer.class;
	}
 

    /**
     * Return the value associated with the column: account.
	 * @return A Set&lt;Account&gt; object (this.account)
	 */
 	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "customer"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Account> getAccounts() {
		return this.accounts;
		
	}
	
	/**
	 * Adds a bi-directional link of type Account to the accounts set.
	 * @param account item to add
	 */
	public void addAccount(Account account) {
		account.setCustomer(this);
		this.accounts.add(account);
	}

  
    /**  
     * Set the value related to the column: account.
	 * @param account the account value you wish to set
	 */
	public void setAccounts(final Set<Account> account) {
		this.accounts = account;
	}

    /**
     * Return the value associated with the column: address1.
	 * @return A Address object (this.address1)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "address1", nullable = false )
	public Address getAddress1() {
		return this.address1;
		
	}
	

  
    /**  
     * Set the value related to the column: address1.
	 * @param address1 the address1 value you wish to set
	 */
	public void setAddress1(final Address address1) {
		this.address1 = address1;
	}

    /**
     * Return the value associated with the column: address2.
	 * @return A Address object (this.address2)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "address2", nullable = false )
	public Address getAddress2() {
		return this.address2;
		
	}
	

  
    /**  
     * Set the value related to the column: address2.
	 * @param address2 the address2 value you wish to set
	 */
	public void setAddress2(final Address address2) {
		this.address2 = address2;
	}

    /**
     * Return the value associated with the column: currentAccountOpeningBalance.
	 * @return A java.math.BigDecimal object (this.currentAccountOpeningBalance)
	 */
	@Basic( optional = false )
	@Column( name = "current_account_opening_balance", nullable = false  )
	public java.math.BigDecimal getCurrentAccountOpeningBalance() {
		return this.currentAccountOpeningBalance;
		
	}
	

  
    /**  
     * Set the value related to the column: currentAccountOpeningBalance.
	 * @param currentAccountOpeningBalance the currentAccountOpeningBalance value you wish to set
	 */
	public void setCurrentAccountOpeningBalance(final java.math.BigDecimal currentAccountOpeningBalance) {
		this.currentAccountOpeningBalance = currentAccountOpeningBalance;
	}

    /**
     * Return the value associated with the column: customerTransaction.
	 * @return A Set&lt;CustomerTransaction&gt; object (this.customerTransaction)
	 */
 	@OneToMany( fetch = FetchType.EAGER, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "customer"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	@OrderBy(clause = "transaction_date")
	public Set<CustomerTransaction> getCustomerTransactions() {
		return this.customerTransactions;
		
	}
	
	/**
	 * Adds a bi-directional link of type CustomerTransaction to the customerTransactions set.
	 * @param customerTransaction item to add
	 */
	public void addCustomerTransaction(CustomerTransaction customerTransaction) {
		customerTransaction.setCustomer(this);
		this.customerTransactions.add(customerTransaction);
	}

  
    /**  
     * Set the value related to the column: customerTransaction.
	 * @param customerTransaction the customerTransaction value you wish to set
	 */
	public void setCustomerTransactions(final Set<CustomerTransaction> customerTransaction) {
		this.customerTransactions = customerTransaction;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Long object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "id", nullable = false  )
	public Long getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Long id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0L) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 50  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: savingsAccountOpeningBalance.
	 * @return A java.math.BigDecimal object (this.savingsAccountOpeningBalance)
	 */
	@Basic( optional = false )
	@Column( name = "savings_account_opening_balance", nullable = false  )
	public java.math.BigDecimal getSavingsAccountOpeningBalance() {
		return this.savingsAccountOpeningBalance;
		
	}
	

  
    /**  
     * Set the value related to the column: savingsAccountOpeningBalance.
	 * @param savingsAccountOpeningBalance the savingsAccountOpeningBalance value you wish to set
	 */
	public void setSavingsAccountOpeningBalance(final java.math.BigDecimal savingsAccountOpeningBalance) {
		this.savingsAccountOpeningBalance = savingsAccountOpeningBalance;
	}

    /**
     * Return the value associated with the column: surname.
	 * @return A String object (this.surname)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 50  )
	public String getSurname() {
		return this.surname;
		
	}
	

  
    /**  
     * Set the value related to the column: surname.
	 * @param surname the surname value you wish to set
	 */
	public void setSurname(final String surname) {
		this.surname = surname;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Customer clone() throws CloneNotSupportedException {
		
        final Customer copy = (Customer)super.clone();

		if (this.getAccounts() != null) {
			copy.getAccounts().addAll(this.getAccounts());
		}
		copy.setAddress1(this.getAddress1());
		copy.setAddress2(this.getAddress2());
		copy.setCurrentAccountOpeningBalance(this.getCurrentAccountOpeningBalance());
		if (this.getCustomerTransactions() != null) {
			copy.getCustomerTransactions().addAll(this.getCustomerTransactions());
		}
		copy.setId(this.getId());
		copy.setName(this.getName());
		copy.setSavingsAccountOpeningBalance(this.getSavingsAccountOpeningBalance());
		copy.setSurname(this.getSurname());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("currentAccountOpeningBalance: " + this.getCurrentAccountOpeningBalance() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("savingsAccountOpeningBalance: " + this.getSavingsAccountOpeningBalance() + ", ");
		sb.append("surname: " + this.getSurname());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Customer that; 
		try {
			that = (Customer) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAddress1() == null) && (that.getAddress1() == null)) || (getAddress1() != null && getAddress1().getId().equals(that.getAddress1().getId())));	
		result = result && (((getAddress2() == null) && (that.getAddress2() == null)) || (getAddress2() != null && getAddress2().getId().equals(that.getAddress2().getId())));	
		result = result && (((getCurrentAccountOpeningBalance() == null) && (that.getCurrentAccountOpeningBalance() == null)) || (getCurrentAccountOpeningBalance() != null && getCurrentAccountOpeningBalance().equals(that.getCurrentAccountOpeningBalance())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getSavingsAccountOpeningBalance() == null) && (that.getSavingsAccountOpeningBalance() == null)) || (getSavingsAccountOpeningBalance() != null && getSavingsAccountOpeningBalance().equals(that.getSavingsAccountOpeningBalance())));
		result = result && (((getSurname() == null) && (that.getSurname() == null)) || (getSurname() != null && getSurname().equals(that.getSurname())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Long newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0L) {
							newHashCode = getId();
						} else {
							newHashCode = (long) super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
		return (int) (this.hashCode & 0xffffff);
	}
	

	
}
