package com.yourname;

import org.junit.Assert;
import org.junit.Test;


import com.yourname.demo.model.*;
import com.yourname.demo.model.factories.*;
import com.yourname.demo.service.data.DataLayerDemo;
import com.yourname.demo.service.data.DataLayerDemoImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/beans.database.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		


	
	/**
	 * Hibernate test case for table: demo.account.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAccount() throws CloneNotSupportedException {

	 	DataLayerDemo dataLayerDemo = DataLayerDemoImpl.getInstance();
		Account account = DemoDataPoolFactory.getAccount();
		dataLayerDemo.saveOrUpdate(account);

		Long accountId = account.getId();
		Account copy = account.clone();
		dataLayerDemo.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerDemo.evict(account); 		 

		account = dataLayerDemo.getAccount(accountId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAcType(), account.getAcType());
		Assert.assertEquals(copy.getBalance(), account.getBalance());
		Assert.assertEquals(copy.getCustomer().getId(), account.getCustomer().getId());
		// tests for coverage completeness
		Assert.assertFalse(account.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(account.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: demo.address.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAddress() throws CloneNotSupportedException {

	 	DataLayerDemo dataLayerDemo = DataLayerDemoImpl.getInstance();
		Address address = DemoDataPoolFactory.getAddress();
		dataLayerDemo.saveOrUpdate(address);

		Long addressId = address.getId();
		Address copy = address.clone();
		dataLayerDemo.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerDemo.evict(address); 		 

		address = dataLayerDemo.getAddress(addressId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getCity(), address.getCity());
		Assert.assertEquals(copy.getCountry(), address.getCountry());
		Assert.assertEquals(copy.getLine1(), address.getLine1());
		Assert.assertEquals(copy.getLine2(), address.getLine2());
		// tests for coverage completeness
		Assert.assertFalse(address.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(address.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: demo.customer.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCustomer() throws CloneNotSupportedException {

	 	DataLayerDemo dataLayerDemo = DataLayerDemoImpl.getInstance();
		Customer customer = DemoDataPoolFactory.getCustomer();
		dataLayerDemo.saveOrUpdate(customer);

		Long customerId = customer.getId();
		Customer copy = customer.clone();
		dataLayerDemo.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerDemo.evict(customer); 		 

		customer = dataLayerDemo.getCustomer(customerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress1().getId(), customer.getAddress1().getId());
		Assert.assertEquals(copy.getAddress2().getId(), customer.getAddress2().getId());
		Assert.assertEquals(copy.getCurrentAccountOpeningBalance(), customer.getCurrentAccountOpeningBalance());
		Assert.assertEquals(copy.getName(), customer.getName());
		Assert.assertEquals(copy.getSavingsAccountOpeningBalance(), customer.getSavingsAccountOpeningBalance());
		Assert.assertEquals(copy.getSurname(), customer.getSurname());
		// tests for coverage completeness
		Assert.assertFalse(customer.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(customer.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: demo.customer_transaction.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testCustomerTransaction() throws CloneNotSupportedException {

	 	DataLayerDemo dataLayerDemo = DataLayerDemoImpl.getInstance();
		CustomerTransaction customerTransaction = DemoDataPoolFactory.getCustomerTransaction();
		dataLayerDemo.saveOrUpdate(customerTransaction);

		Long customerTransactionId = customerTransaction.getId();
		CustomerTransaction copy = customerTransaction.clone();
		dataLayerDemo.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerDemo.evict(customerTransaction); 		 

		customerTransaction = dataLayerDemo.getCustomerTransaction(customerTransactionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAmount(), customerTransaction.getAmount());
		Assert.assertEquals(copy.getCustomer().getId(), customerTransaction.getCustomer().getId());
		Assert.assertEquals(copy.getDestinationAccount().getId(), customerTransaction.getDestinationAccount().getId());
		Assert.assertEquals(copy.getDrcr(), customerTransaction.getDrcr());
		Assert.assertEquals(copy.getOriginatingAccount().getId(), customerTransaction.getOriginatingAccount().getId());
		Assert.assertEquals(copy.getTransactionDate().toDate().getTime() / 1000, customerTransaction.getTransactionDate().toDate().getTime() / 1000);
		// tests for coverage completeness
		Assert.assertFalse(customerTransaction.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(customerTransaction.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}



}

